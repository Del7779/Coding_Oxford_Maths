################################################################################
# er_percolation_modular.jl
#
# This version of the ER percolation simulation script is organized into
# a module for percolation functions and a main section that runs simulations
# for different system sizes and plots the results.

using Distributed
# If worker processes were not started externally, add some.
if nprocs() == 1
    addprocs(10)
end

@everywhere begin
    using Random
    using Statistics
    using SharedArrays
    using Distributed
end

@everywhere mutable struct UnionFind
    parent::Vector{Int}
    rank::Vector{Int}
end

@everywhere function UnionFind(n::Int)
    return UnionFind(collect(1:n), zeros(Int, n))
end

@everywhere function uf_find(uf::UnionFind, x::Int)
    if uf.parent[x] != x
        uf.parent[x] = uf_find(uf, uf.parent[x])
    end
    return uf.parent[x]
end

@everywhere function uf_union(uf::UnionFind, x::Int, y::Int)
    root_x = uf_find(uf, x)
    root_y = uf_find(uf, y)
    if root_x != root_y
        if uf.rank[root_x] > uf.rank[root_y]
            uf.parent[root_y] = root_x
        elseif uf.rank[root_x] < uf.rank[root_y]
            uf.parent[root_x] = root_y
        else
            uf.parent[root_y] = root_x
            uf.rank[root_x] += 1
        end
    end
end

# ------------------------------------------------------------------------------
# simulate_trial
#
# Performs a single trial of the Newman–Ziff ER percolation simulation.
#
# Returns:
#   - s_trial: A vector of the largest cluster sizes sampled over the window.
#   - chi_trial: A vector of the computed susceptibilities at each sample.
# ------------------------------------------------------------------------------
@everywhere function simulate_trial(N::Int, window_fraction::Float64, num_window_points::Int, sampling_interval::Float64)
    n = max(1, floor(Int, window_fraction * N))
    # Create and shuffle the list of all possible edges.
    edges = [(i, j) for i in 1:N for j in (i+1):N]
    shuffle!(edges)

    uf = UnionFind(N)
    record_idx = 1      # index for storing data in the sampling window
    sample_counter = 0  # counts how many edges in the window have been processed

    s_trial = zeros(Float64, num_window_points)
    chi_trial = zeros(Float64, num_window_points)

    for (edge_count, (u, v)) in enumerate(edges)
        uf_union(uf, u, v)
        # Only record data in the window [N/2 - n, N/2 + n]
        if (edge_count > (N / 2 - n)) && (edge_count <= (N / 2 + n))
            sample_counter += 1
            if sample_counter ≥ sampling_interval * record_idx
                # Compute component sizes.
                component_sizes = zeros(Int, N)
                for i in 1:N
                    root = uf_find(uf, i)
                    component_sizes[root] += 1
                end
                largest_cluster = maximum(component_sizes)
                # Exclude the largest cluster when computing susceptibility.
                reduced_cluster = component_sizes[component_sizes.!=largest_cluster]
                chi = 0.0
                if sum(reduced_cluster) != 0
                    unique_vals = unique(reduced_cluster)
                    counts_arr = [count(==(val), reduced_cluster) for val in unique_vals]
                    chi = sum(counts_arr .* (unique_vals .^ 2)) / sum(reduced_cluster)
                end
                s_trial[record_idx] = largest_cluster
                chi_trial[record_idx] = chi
                record_idx += 1
                if record_idx > num_window_points
                    break
                end
            end
        elseif edge_count > (N / 2 + n)
            break
        end
    end
    return s_trial, chi_trial
end

# ------------------------------------------------------------------------------
# simulate_ER
#
# Runs multiple trials of the ER percolation simulation for a system of size N.
#
# Keyword arguments:
#   trials         : Number of trials to run.
#   window_fraction: Fraction defining the window half-width around m = N/2.
#   max_points     : Maximum number of sample points to record.
#
# Returns a tuple:
#   (p_values, var_smax, chi_average, GCC_fraction)
# ------------------------------------------------------------------------------
@everywhere function simulate_ER(N::Int; trials::Int=1000, window_fraction::Float64=0.01, max_points::Int=1000)
    n = max(1, floor(Int, window_fraction * N))
    full_points = 2 * n
    num_window_points = min(full_points, max_points)
    sampling_interval = full_points / num_window_points
    p_values = collect(range((N / 2 - n) / N, stop=(N / 2 + n) / N, length=num_window_points))

    # Use SharedArrays so that distributed workers can write to a common array.
    s_max_values = SharedArray{Float64}((trials, num_window_points))
    chi_values = SharedArray{Float64}((trials, num_window_points))

    @sync @distributed for t in 1:trials
        s_trial, chi_trial = simulate_trial(N, window_fraction, num_window_points, sampling_interval)
        for i in 1:num_window_points
            s_max_values[t, i] = s_trial[i]
            chi_values[t, i] = chi_trial[i]
        end
    end

    # Compute average values across trials.
    chi_average = vec(mean(chi_values, dims=1))
    s_max_average = vec(mean(s_max_values, dims=1))
    GCC_fraction = s_max_average / N
    s_max_sq_mean = vec(mean(s_max_values .^ 2, dims=1))
    var_smax = sqrt.(s_max_sq_mean .- s_max_average .^ 2)

    return p_values, var_smax, chi_average, GCC_fraction
end

# module ERPercolation

################################################################################
# Main Script
#
# This section runs the simulation for various system sizes, analyzes the data,
# and generates plots.
################################################################################
using Plots
using Colors
using ProgressMeter
using BenchmarkTools
using SharedArrays

# Define system sizes to simulate.
system_sizes = [100, 1000, 5000, 12000, 20000, 30000, 80000]
critical_points = Float64[]
simulation_data = Dict{Int,Dict{String,Any}}()

@showprogress for N in system_sizes
    start_time = time_ns()
    # Run the simulation for the current system size (using 100 trials for speed).
    p_vals, susceptibilities_1, susceptibilities_2, GCC_fraction = simulate_ER(N;
        trials=100, window_fraction=0.09)

    # Store simulation data for later plotting.
    simulation_data[N] = Dict(
        "p_vals" => p_vals,
        "susceptibilities_1" => susceptibilities_1,
        "susceptibilities_2" => susceptibilities_2,
        "GCC_fraction" => GCC_fraction
    )

    # Heuristic: compute the discrete derivative of GCC_fraction with respect to p.
    dGCC_dp = diff(GCC_fraction) ./ diff(p_vals)
    idx = findmax(dGCC_dp)[2]
    p_c = p_vals[idx]
    push!(critical_points, p_c)

    println("N = $N, p_c = $(round(p_c, digits=4))")
    end_time = time_ns()
    elapsed_time = (end_time - start_time) / 1e9
    println("Elapsed time: $elapsed_time seconds")
end

# -----------------------------
# Plotting Results
# -----------------------------
# Plot critical points versus 1/N.
p_critical = plot(1.0 ./ system_sizes, critical_points,
    marker=:circle, linestyle=:solid,
    xlabel="1/N", ylabel="p_c",
    title="Critical Points vs 1/N",
    label="Critical Points")
display(p_critical)

# Create three plots for the simulation data.
p_sim1 = plot(title="Variance of the reduced cluster size", xlabel="p", ylabel="Susceptibilities 1")
p_sim2 = plot(title="GCC Fraction scaled", xlabel="p", ylabel="GCC Fraction * N^(1/3)")
p_sim3 = plot(title="Variance of the GCC", xlabel="p", ylabel="Susceptibilities 2")

for N in system_sizes
    data = simulation_data[N]
    # Color intensity scales with system size.
    color_val = RGB(N / maximum(system_sizes), 0.0, 0.0)
    plot!(p_sim1, data["p_vals"], data["susceptibilities_1"],
        seriestype=:scatter, mc=color_val, label="N=$N", ms=2)
    plot!(p_sim2, data["p_vals"], data["GCC_fraction"] .* N^(1 / 3),
        linestyle=:solid, color=color_val, label="N=$N", lw=1)
    plot!(p_sim3, data["p_vals"], data["susceptibilities_2"],
        seriestype=:scatter, mc=color_val, label="N=$N", ms=2)
end

display(p_sim1)
display(p_sim2)
display(p_sim3)